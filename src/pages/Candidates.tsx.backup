import React, { useEffect, useState } from 'react'
import { supabase } from '../lib/supabase'
import { SearchFilter } from '../components/ui/SearchFilter'
import { StatusBadge } from '../components/ui/StatusBadge'
import { Plus, Users, Phone, Calendar, Edit, CheckCircle, Clock } from 'lucide-react'
import { useAuth } from '../contexts/AuthContext'

interface Candidate {
  id: string
  name: string
  phone: string
  source?: string
  role: string
  inquiry_date: string
  status: string
  scheduled_date: string | null
  assigned_to: string | null
  created_at: string
}

export function Candidates() {
  const [candidates, setCandidates] = useState<Candidate[]>([])
  const [filteredCandidates, setFilteredCandidates] = useState<Candidate[]>([])
  const [searchTerm, setSearchTerm] = useState('')
  const [filterStatus, setFilterStatus] = useState('all')
  const [dateRange, setDateRange] = useState<{ start: string; end: string }>({ start: '', end: '' })
  const [loading, setLoading] = useState(true)
  const [showModal, setShowModal] = useState(false)
  const [selectedCandidate, setSelectedCandidate] = useState<Candidate | null>(null)
  const [formData, setFormData] = useState({
    name: '',
    phone: '',
    role: '',
    status: 'PENDING' as 'PENDING' | 'INTERVIEW_SCHEDULED' | 'LOST',
    scheduledDateOnly: ''
  })
  const [showBulkUpload, setShowBulkUpload] = useState(false)
  const [uploadFile, setUploadFile] = useState<File | null>(null)

  // row action state
  const [openMenuId, setOpenMenuId] = useState<string | null>(null)
  const [scheduleModal, setScheduleModal] = useState<{ open: boolean; candidate: Candidate | null; dateOnly: string }>(
    { open: false, candidate: null, dateOnly: '' }
  )

  const { user } = useAuth()

  const statusOptions = ['PENDING', 'INTERVIEW_SCHEDULED', 'WON', 'LOST']
  const roleOptions = ['Nanny', 'House Manager', 'Chef', 'Driver', 'AOB', 'Caregiver', 'General', 'Other']

  useEffect(() => {
    loadCandidates()
  }, [])

  useEffect(() => {
    filterCandidates()
  }, [candidates, searchTerm, filterStatus, dateRange])

  const loadCandidates = async () => {
    try {
      const { data, error } = await supabase
        .from('candidates')
        .select('*')
        .neq('status', 'ARCHIVED')
        .order('created_at', { ascending: false })

      if (error) throw error
      setCandidates(data || [])
    } catch (error) {
      console.error('Error loading candidates:', error)
    } finally {
      setLoading(false)
    }
  }

  const filterCandidates = () => {
    let filtered = [...candidates]

    if (searchTerm) {
      filtered = filtered.filter(candidate =>
        candidate.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        candidate.phone.includes(searchTerm) ||
        candidate.role.toLowerCase().includes(searchTerm.toLowerCase())
      )
    }

    if (filterStatus !== 'all') {
      filtered = filtered.filter(candidate => candidate.status === filterStatus)
    }

    if (dateRange.start && dateRange.end) {
      filtered = filtered.filter(c => {
        const d = new Date(c.created_at).toISOString().split('T')[0]
        return d >= dateRange.start && d <= dateRange.end
      })
    }

    setFilteredCandidates(filtered)
  }

  const updateLocalCandidate = (id: string, updater: (c: Candidate) => Candidate) => {
    setCandidates(prev => prev.map(c => (c.id === id ? updater(c) : c)))
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    try {
      let scheduledIso: string | null = null
      if (formData.status === 'INTERVIEW_SCHEDULED' && formData.scheduledDateOnly) {
        const d = new Date(formData.scheduledDateOnly)
        d.setHours(14, 0, 0, 0)
        scheduledIso = d.toISOString()
      }

      if (selectedCandidate) {
        const payload: any = { name: formData.name, phone: formData.phone, role: formData.role, status: formData.status }
        payload.scheduled_date = scheduledIso
        const { error } = await supabase.from('candidates').update(payload).eq('id', selectedCandidate.id)
        if (error) throw error

        await supabase.from('updates').insert({
          linked_to_type: 'candidate',
          linked_to_id: selectedCandidate.id,
          user_id: user?.id,
          update_text: `Updated candidate ${formData.name}`,
        })

        updateLocalCandidate(selectedCandidate.id, c => ({ ...c, ...payload }))
        setShowModal(false)
      } else {
        const insertPayload: any = {
          name: formData.name,
          phone: formData.phone,
          role: formData.role,
          status: formData.status,
          assigned_to: user?.id,
          scheduled_date: scheduledIso
        }
        const { data, error } = await supabase.from('candidates').insert(insertPayload).select('*').single()
        if (error) throw error

        if (scheduledIso) {
          await supabase.from('interviews').insert({
            candidate_id: data.id,
            date_time: scheduledIso,
            location: 'Office',
            assigned_staff: user?.id,
            attended: false,
            outcome: null,
            notes: ''
          })
        }

        await supabase.from('updates').insert({
          linked_to_type: 'candidate',
          linked_to_id: data.id,
          user_id: user?.id,
          update_text: `Added candidate ${formData.name}${scheduledIso ? ' with interview scheduled' : ''}`,
        })

        setCandidates(prev => [data, ...prev])
        setShowModal(false)
      }
      resetForm()
    } catch (error) {
      console.error('Error saving candidate:', error)
    }
  }

  const handleSetPending = async (candidate: Candidate) => {
    try {
      const { error } = await supabase
        .from('candidates')
        .update({ status: 'PENDING', scheduled_date: null })
        .eq('id', candidate.id)
      if (error) throw error
      await supabase.from('updates').insert({
        linked_to_type: 'candidate',
        linked_to_id: candidate.id,
        user_id: user?.id,
        update_text: `Marked as PENDING`,
      })
      updateLocalCandidate(candidate.id, c => ({ ...c, status: 'PENDING', scheduled_date: null }))
    } catch (error) {
      console.error('Error updating status to pending:', error)
    }
  }

  const openSchedule = (candidate: Candidate) => {
    setScheduleModal({ open: true, candidate, dateOnly: '' })
  }

  const confirmSchedule = async () => {
    if (!scheduleModal.candidate || !scheduleModal.dateOnly) return
    const candidate = scheduleModal.candidate
    try {
      const d = new Date(scheduleModal.dateOnly)
      d.setHours(14, 0, 0, 0)
      const iso = d.toISOString()
      const { error } = await supabase
        .from('candidates')
        .update({ status: 'INTERVIEW_SCHEDULED', scheduled_date: iso })
        .eq('id', candidate.id)
      if (error) throw error

      const { error: err2 } = await supabase.from('interviews').insert({
        candidate_id: candidate.id,
        date_time: iso,
        location: 'Office',
        assigned_staff: user?.id,
        attended: false,
        outcome: null,
        notes: ''
      })
      if (err2) throw err2

      await supabase.from('updates').insert({
        linked_to_type: 'candidate',
        linked_to_id: candidate.id,
        user_id: user?.id,
        update_text: `Interview scheduled for ${candidate.name} on ${d.toDateString()} 2:00 PM`,
      })

      updateLocalCandidate(candidate.id, c => ({ ...c, status: 'INTERVIEW_SCHEDULED', scheduled_date: iso }))
      setScheduleModal({ open: false, candidate: null, dateOnly: '' })
    } catch (error) {
      console.error('Error scheduling interview:', error)
      alert('Failed to schedule interview')
    }
  }

  const handleMarkAsLost = async (candidate: Candidate) => {
    try {
      const { error } = await supabase
        .from('candidates')
        .update({ status: 'LOST' })
        .eq('id', candidate.id)

      if (error) throw error

      await supabase.from('updates').insert({
        linked_to_type: 'candidate',
        linked_to_id: candidate.id,
        user_id: user?.id,
        update_text: `Candidate marked as LOST`,
      })

      updateLocalCandidate(candidate.id, c => ({ ...c, status: 'LOST' }))
    } catch (error) {
      console.error('Error marking candidate as lost:', error)
    }
  }

  const formatDisplayDate = (dateString: string) => {
    const date = new Date(dateString)
    const day = date.getDate()
    const month = date.toLocaleString('default', { month: 'long' })
    const year = date.getFullYear()
    const suffix = day === 1 || day === 21 || day === 31 ? 'st' :
                   day === 2 || day === 22 ? 'nd' :
                   day === 3 || day === 23 ? 'rd' : 'th'
    return `${day}${suffix} ${month} ${year}`
  }

  const downloadTemplate = () => {
    const csvContent = `Name,Phone,Role,Status,Scheduled Date (YYYY-MM-DD)\nJohn Doe,555-1234,Nanny,PENDING,\nJane Smith,555-5678,Chef,INTERVIEW_SCHEDULED,2025-09-15`
    const blob = new Blob([csvContent], { type: 'text/csv' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = 'candidate_upload_template.csv'
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const handleBulkUpload = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!uploadFile) {
      alert('Please select a CSV file to upload')
      return
    }

    try {
      const text = await uploadFile.text()
      const rows = text.split(/\r?\n/).filter(Boolean)
      const header = rows.shift() || ''
      const cols = header.split(',').map(s => s.trim().toLowerCase())
      const nameIdx = cols.indexOf('name')
      const phoneIdx = cols.indexOf('phone')
      const roleIdx = cols.indexOf('role')
      const statusIdx = cols.indexOf('status')
      const schedIdx = cols.findIndex(c => c.startsWith('scheduled'))
      if (nameIdx === -1 || phoneIdx === -1 || roleIdx === -1) {
        alert('CSV missing required columns: Name, Phone, Role')
        return
      }

      // fetch existing phones to avoid duplicates
      const { data: existing } = await supabase.from('candidates').select('phone')
      const existingSet = new Set((existing || []).map(r => r.phone))

      const inserts: any[] = []
      for (const row of rows) {
        const parts = row.split(',')
        const name = parts[nameIdx]?.trim()
        const phone = parts[phoneIdx]?.trim()
        const role = parts[roleIdx]?.trim()
        let status = (parts[statusIdx]?.trim() || '').toUpperCase()
        const sched = parts[schedIdx]?.trim()

        // Default to PENDING if date is missing
        if (!sched && status === 'INTERVIEW_SCHEDULED') status = 'PENDING'
        if (!status) status = 'PENDING'

        if (!name || !phone || !role) continue
        if (existingSet.has(phone)) continue

        let scheduled_date: string | null = null
        if (status === 'INTERVIEW_SCHEDULED' && sched) {
          const d = new Date(sched)
          d.setHours(14, 0, 0, 0)
          scheduled_date = d.toISOString()
        }
        inserts.push({ name, phone, role, status, assigned_to: user?.id, scheduled_date })
      }

      if (inserts.length === 0) {
        alert('No valid rows to insert (duplicates or missing fields)')
        return
      }

      const { data, error } = await supabase.from('candidates').insert(inserts).select('id, status, scheduled_date')
      if (error) throw error

      const scheduledToCreate = (data || []).filter(d => d.status === 'INTERVIEW_SCHEDULED' && d.scheduled_date)
      if (scheduledToCreate.length > 0) {
        await supabase.from('interviews').insert(
          scheduledToCreate.map(d => ({
            candidate_id: d.id,
            date_time: d.scheduled_date as string,
            location: 'Office',
            assigned_staff: user?.id,
            attended: false,
            outcome: null,
            notes: ''
          }))
        )
      }

      await loadCandidates()
      setShowBulkUpload(false)
      setUploadFile(null)
      alert('Upload complete')
    } catch (error) {
      console.error('Error bulk uploading candidates:', error)
      alert('Error uploading candidates. Please check your CSV and try again.')
    }
  }

  const resetForm = () => {
    setFormData({ name: '', phone: '', role: '', status: 'PENDING', scheduledDateOnly: '' })
    setSelectedCandidate(null)
  }

  if (loading) {
    return (
      <div className="p-6">
        <div className="animate-pulse">
          <div className="h-8 bg-gray-200 rounded w-1/4 mb-6"></div>
          <div className="space-y-4">
            {[...Array(5)].map((_, i) => (
              <div key={i} className="bg-white p-6 rounded-lg shadow h-32"></div>
            ))}
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="p-6">
      {/* Header */}
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Candidates</h1>
          <p className="text-gray-600">Track candidate inquiries and outreach progress</p>
        </div>
        <div className="flex space-x-2">
          <button
            onClick={() => setShowBulkUpload(true)}
            className="flex items-center px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            title="Bulk Upload"
          >
            <Plus className="w-4 h-4" />
          </button>
          <button
            onClick={() => setShowModal(true)}
            className="flex items-center px-4 py-2 bg-nestalk-primary text-white rounded-lg hover:bg-nestalk-primary/90 transition-colors"
          >
            <Plus className="w-4 h-4 mr-2" />
            Add Candidate
          </button>
        </div>
      </div>

      {/* Search, Filter */}
      <div className="flex flex-col gap-3">
        <SearchFilter
          searchTerm={searchTerm}
          onSearchChange={setSearchTerm}
          filterStatus={filterStatus}
          onFilterChange={setFilterStatus}
          statusOptions={statusOptions}
          placeholder="Search by name, phone, or role..."
        />
        <div className="flex items-center gap-3">
          <span className="text-sm text-gray-600">Date added:</span>
          <input
            type="date"
            value={dateRange.start}
            onChange={(e) => setDateRange(prev => ({ ...prev, start: e.target.value }))}
            className="px-3 py-2 border border-gray-300 rounded-lg text-sm"
          />
          <input
            type="date"
            value={dateRange.end}
            onChange={(e) => setDateRange(prev => ({ ...prev, end: e.target.value }))}
            className="px-3 py-2 border border-gray-300 rounded-lg text-sm"
          />
        </div>
      </div>

      <div className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden mt-3">
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">#</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Phone</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Role</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Inquiry Date</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {filteredCandidates.map((candidate, index) => (
                <tr key={candidate.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{index + 1}</td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm font-medium text-gray-900">{candidate.name}</div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm text-gray-900">
                      <span className="hidden sm:inline-flex items-center">
                        <Phone className="w-3 h-3 mr-1" />
                      </span>
                      {candidate.phone}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{candidate.role}</td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center gap-2">
                      <StatusBadge status={candidate.status} type="candidate" />
                      {candidate.status === 'INTERVIEW_SCHEDULED' && candidate.scheduled_date && (
                        <span className="inline-flex items-center text-xs text-gray-600">
                          <Calendar className="w-3 h-3 mr-1" />
                          {formatDisplayDate(candidate.scheduled_date)}
                        </span>
                      )}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{formatDisplayDate(candidate.inquiry_date)}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <div className="relative inline-flex items-center gap-2">
                      <button
                        onClick={() => { setShowModal(true); setSelectedCandidate(candidate); setFormData({
                          name: candidate.name,
                          phone: candidate.phone,
                          role: candidate.role,
                          status: candidate.status as any,
                          scheduledDateOnly: candidate.scheduled_date ? new Date(candidate.scheduled_date).toISOString().split('T')[0] : ''
                        })}}
                        className="text-nestalk-primary hover:text-nestalk-primary/80"
                        title="Edit"
                      >
                        <Edit className="w-4 h-4" />
                      </button>
                      <select
                        onChange={(e) => {
                          const v = e.target.value
                          if (v === 'PENDING') handleSetPending(candidate)
                          if (v === 'INTERVIEW_SCHEDULED') openSchedule(candidate)
                          if (v === 'LOST') handleMarkAsLost(candidate)
                          e.currentTarget.selectedIndex = 0
                        }}
                        className="px-2 py-1 border border-gray-300 rounded text-sm bg-white"
                        defaultValue=""
                        title="Actions"
                      >
                        <option value="" disabled>Actions</option>
                        <option value="PENDING">Pending</option>
                        <option value="INTERVIEW_SCHEDULED">Interview Scheduled</option>
                        <option value="LOST">Lost</option>
                      </select>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {filteredCandidates.length === 0 && (
        <div className="text-center py-12">
          <Users className="mx-auto h-12 w-12 text-gray-400" />
          <h3 className="mt-2 text-sm font-medium text-gray-900">No candidates found</h3>
          <p className="mt-1 text-sm text-gray-500">
            {searchTerm || filterStatus !== 'all' 
              ? 'Try adjusting your search or filter criteria.'
              : 'Get started by adding your first candidate inquiry.'
            }
          </p>
        </div>
      )}

      {/* Add/Edit Modal */}
      {showModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50" onClick={() => { setShowModal(false); resetForm() }}>
          <div className="bg-white rounded-lg max-w-md w-full max-h-screen overflow-y-auto" onClick={(e) => e.stopPropagation()}>
            <div className="p-6">
              <h2 className="text-lg font-semibold text-gray-900 mb-4">
                {selectedCandidate ? 'Edit Candidate' : 'Add New Candidate'}
              </h2>

              <form onSubmit={handleSubmit} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Name</label>
                  <input
                    type="text"
                    required
                    value={formData.name}
                    onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-nestalk-primary focus:border-transparent"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Phone</label>
                  <input
                    type="tel"
                    required
                    value={formData.phone}
                    onChange={(e) => setFormData({ ...formData, phone: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-nestalk-primary focus:border-transparent"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Role</label>
                  <select
                    required
                    value={formData.role}
                    onChange={(e) => setFormData({ ...formData, role: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-nestalk-primary focus:border-transparent"
                  >
                    <option value="">Select role</option>
                    {roleOptions.map(role => (
                      <option key={role} value={role}>{role}</option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Status</label>
                  <select
                    value={formData.status}
                    onChange={(e) => setFormData({ ...formData, status: e.target.value as any })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-nestalk-primary focus:border-transparent"
                  >
                    {statusOptions.map(status => (
                      <option key={status} value={status}>
                        {status.replace('_', ' ')}
                      </option>
                    ))}
                  </select>
                </div>

                {formData.status === 'INTERVIEW_SCHEDULED' && (
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Interview Date</label>
                    <input
                      type="date"
                      value={formData.scheduledDateOnly}
                      onChange={(e) => setFormData({ ...formData, scheduledDateOnly: e.target.value })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-nestalk-primary focus:border-transparent"
                    />
                    <p className="text-xs text-gray-500 mt-1">Time defaults to 2:00 PM</p>
                  </div>
                )}

                <div className="flex gap-3 pt-4">
                  <button
                    type="button"
                    onClick={() => {
                      setShowModal(false)
                      resetForm()
                    }}
                    className="flex-1 px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    className="flex-1 px-4 py-2 bg-nestalk-primary text-white rounded-lg hover:bg-nestalk-primary/90 transition-colors"
                  >
                    {selectedCandidate ? 'Update' : 'Add'} Candidate
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}

      {/* Schedule Interview Modal */}
      {scheduleModal.open && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50" onClick={() => setScheduleModal({ open: false, candidate: null, dateOnly: '' })}>
          <div className="bg-white rounded-lg max-w-md w-full" onClick={(e) => e.stopPropagation()}>
            <div className="p-6">
              <h2 className="text-lg font-semibold text-gray-900 mb-4">Schedule Interview</h2>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Date</label>
                  <input
                    type="date"
                    value={scheduleModal.dateOnly}
                    onChange={(e) => setScheduleModal(prev => ({ ...prev, dateOnly: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-nestalk-primary focus:border-transparent"
                  />
                  <p className="text-xs text-gray-500 mt-1">Time defaults to 2:00 PM</p>
                </div>
                <div className="flex gap-3 pt-2">
                  <button
                    type="button"
                    onClick={() => setScheduleModal({ open: false, candidate: null, dateOnly: '' })}
                    className="flex-1 px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors"
                  >
                    Cancel
                  </button>
                  <button
                    type="button"
                    onClick={confirmSchedule}
                    className="flex-1 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors inline-flex items-center justify-center gap-2"
                  >
                    <CheckCircle className="w-4 h-4" /> Confirm
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Bulk Upload Modal */}
      {showBulkUpload && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg max-w-md w-full">
            <div className="p-6">
              <h2 className="text-lg font-semibold text-gray-900 mb-4">
                Bulk Upload Candidates
              </h2>

              <form onSubmit={handleBulkUpload} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Upload CSV File
                  </label>
                  <input
                    type="file"
                    accept=".csv"
                    onChange={(e) => setUploadFile(e.target.files?.[0] || null)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-nestalk-primary focus:border-transparent"
                  />
                </div>

                <div className="flex gap-3">
                  <button
                    type="button"
                    onClick={() => {
                      setShowBulkUpload(false)
                      setUploadFile(null)
                    }}
                    className="flex-1 px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors"
                  >
                    Cancel
                  </button>
                  <button
                    type="button"
                    onClick={downloadTemplate}
                    className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                  >
                    Download Template
                  </button>
                  <button
                    type="submit"
                    className="flex-1 px-4 py-2 bg-nestalk-primary text-white rounded-lg hover:bg-nestalk-primary/90 transition-colors"
                  >
                    Upload
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}

    </div>
  )
}